{"version":3,"sources":["components/Note.js","components/Footer.js","services/Notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","deleteNote","label","important","className","content","onClick","Footer","style","color","fontStyle","fontSize","url","axios","get","then","response","data","newObject","post","id","put","delete","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","runuseEffect","setRun","errorMessage","setErrorMessage","useEffect","console","log","noteServices","initialNotes","catch","err","notesToShow","filter","Notification","message","map","i","key","find","n","changedNote","updatedNote","error","setTimeout","toggleImportanceOf","DeletedNote","removeNote","onSubmit","e","preventDefault","noteObject","date","Date","toISOString","Math","random","length","createdNote","concat","type","value","onChange","target","required","ReactDOM","render","document","getElementById"],"mappings":"uNAceA,EAZF,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,iBAAkBC,EAAiB,EAAjBA,WAC9BC,EAAQH,EAAKI,UACb,qBAAuB,iBAE7B,OACI,wBAAIC,UAAU,QACTL,EAAKM,QACN,4BAAQC,QAASN,GAAmBE,GACpC,4BAAQI,QAASL,GAAjB,aCOGM,EAfA,WAOX,OACI,yBAAKC,MAPW,CAChBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAKN,6BACA,uF,gBCVNC,EAAM,aAsBG,EApBA,WAEX,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAkB9B,EAfA,SAACC,GAEZ,OADgBL,IAAMM,KAAKP,EAAIM,GAChBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa9B,EAVA,SAACG,EAAIF,GAEhB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAoBQ,GAAKF,GAC1BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ9B,EALA,SAACG,GAEZ,OADgBP,IAAMS,OAAN,UAAgBV,EAAhB,YAAuBQ,IACxBL,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCoG9BM,EApHH,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACPC,EADO,KACAC,EADA,OAEgBF,mBAAS,IAFzB,mBAEPG,EAFO,KAEEC,EAFF,OAGgBJ,oBAAS,GAHzB,mBAGPK,EAHO,KAGEC,EAHF,OAIiBN,mBAAS,GAJ1B,mBAIPO,EAJO,KAIOC,EAJP,OAK0BR,mBAAS,MALnC,mBAKPS,EALO,KAKOC,EALP,KAOdC,qBAAU,WACNC,QAAQC,IAAI,UACZC,IACCvB,MAAK,SAAAwB,GAAY,OAAEb,EAASa,MAC5BC,OAAM,SAAAC,GAAG,OAAEL,QAAQC,IAAII,QAC1B,CAACV,IAKH,IAyBMW,EAAcb,EAAUJ,EAAQA,EAAMkB,QAAO,SAAA5C,GAAI,OAAuB,IAAnBA,EAAKI,aAyC1DyC,EAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OAAgB,OAAZA,EACO,KAIP,yBAAKzC,UAAU,SACVyC,IAKb,OACI,6BACI,qCACA,kBAACD,EAAD,CAAcC,QAASZ,IACvB,4BAAQ3B,QAAS,kBAAIwB,GAAYD,KAAjC,QACUA,EAAU,YAAa,OAEjC,4BACKa,EAAYI,KAAI,SAAC/C,EAAMgD,GAAP,OACb,kBAAC,EAAD,CAAMC,IAAKD,EAAGhD,KAAMA,EAAMC,iBAAoB,kBAvDnC,SAAAoB,GAEvB,IAAMrB,EAAO0B,EAAMwB,MAAK,SAAAC,GAAC,OAAIA,EAAE9B,KAAOA,KAChC+B,EAAW,eAAQpD,EAAR,CAAcI,WAAYJ,EAAKI,YAEhDmC,EAAoBlB,EAAG+B,GAAapC,MAAK,SAAAqC,GAAW,OAChD1B,EAASD,EAAMqB,KAAI,SAAA/C,GAAI,OAAIA,EAAKqB,KAAOA,EAAKrB,EAAOqD,SAC9CZ,OAAM,SAAAa,GACHnB,EAAgB,SAAD,OACFnC,EAAKM,QADH,sCAGfiD,YAAW,WACPpB,EAAgB,QACjB,QA0C+CqB,CAAmBxD,EAAKqB,KAAKnB,WAAc,kBApC1F,SAAAmB,GACf,IAAMoC,EAAc/B,EAAMwB,MAAK,SAAAC,GAAC,OAAIA,EAAE9B,KAAOA,KAC7CkB,EAAoBlB,GACnBL,KAAKW,EAASD,EAAMkB,QAAO,SAAA5C,GAAI,OAAIA,IAASyD,OACxChB,OAAM,SAAAa,GACHnB,EAAgB,SAAD,OACFsB,EAAYnD,QADV,sCAGfiD,YAAW,WACPpB,EAAgB,QACjB,QA0BkGuB,CAAW1D,EAAKqB,WAGzH,0BAAMsC,SA1FE,SAACC,GACbA,EAAEC,iBACF,IAAMC,EAAa,CACfxD,QAASsB,EACTmC,MAAM,IAAIC,MAAOC,cACjB7D,UAAW8D,KAAKC,SAAW,GAC3B9C,GAAIK,EAAM0C,OAAS,GAGvB7B,EAAoBuB,GAAY9C,MAAK,SAAAqD,GAC7B1C,EAASD,EAAM4C,OAAOD,IAEtBxC,EAAW,OACZY,OAAM,SAAAa,GACLnB,EAAgB,gCAIhBoB,YAAW,WACPtB,EAAOD,EAAe,GACtBG,EAAgB,QACjB,UAsEC,2BAAOoC,KAAO,OAAOC,MAAS5C,EAAS6C,SAhE9B,SAACb,GAEtB/B,EAAW+B,EAAEc,OAAOF,QA8D6DG,UAAQ,IAC7E,4BAAQJ,KAAK,UAAb,aAER,kBAAC,EAAD,Q,MC7GZK,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.88518a23.chunk.js","sourcesContent":["import React from 'react' ;\r\n\r\nconst Note = ({ note, toggleImportance, deleteNote }) => {\r\n    const label = note.important\r\n        ? 'make not important' : 'make important'\r\n\r\n    return (\r\n        <li className=\"note\">\r\n            {note.content}\r\n            <button onClick={toggleImportance}>{label}</button>\r\n            <button onClick={deleteNote}>Delete!</button>\r\n        </li>\r\n    )\r\n}\r\nexport default Note;","import React from 'react'\r\n\r\nconst Footer = () => {\r\n    const footerStyle = {\r\n        color: 'green',\r\n        fontStyle: 'italic',\r\n        fontSize: 16\r\n    }\r\n\r\n    return (\r\n        <div style={footerStyle}>\r\n            <br />\r\n            <em>Note app, coded by Swetha for Full Stack Open course </em>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer;","import axios from 'axios'\r\n\r\nconst url = '/api/notes'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(url)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = (newObject) => {\r\n    const request = axios.post(url,newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${url}/${id}`,newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst remove = (id) => {\r\n    const request = axios.delete(`${url}/${id}`)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update, remove }\r\n\r\n\r\n","import React, { useState, useEffect } from 'react'\r\nimport Note from './components/Note'\r\nimport Footer from './components/Footer'\r\nimport noteServices from './services/Notes'\r\n\r\nconst App = () => {\r\n    const [notes, setNotes] = useState([])\r\n    const [newNote, setNewNote] = useState('')\r\n    const [showAll, setShowAll] = useState(true);\r\n    const [runuseEffect, setRun] = useState(0)\r\n    const [errorMessage, setErrorMessage] = useState(null)\r\n\r\n    useEffect(()=>{\r\n        console.log('Effect');\r\n        noteServices.getAll()\r\n        .then(initialNotes=>setNotes(initialNotes))\r\n        .catch(err=>console.log(err))\r\n    },[runuseEffect])\r\n\r\n    //console.log(`render ${notes.length} notes`)\r\n    //console.log(Date())\r\n\r\n    const addNote = (e) => {\r\n        e.preventDefault();\r\n        const noteObject = {\r\n            content: newNote,\r\n            date: new Date().toISOString(),\r\n            important: Math.random() > 0.5,\r\n            id: notes.length + 1,\r\n        }\r\n        \r\n        noteServices.create(noteObject).then(createdNote => {\r\n                setNotes(notes.concat(createdNote))\r\n                //setRun(runuseEffect+1);\r\n                setNewNote('')\r\n            }).catch(error=>{\r\n                setErrorMessage(\r\n                    `Some Error occured Try Again`\r\n                    \r\n                )\r\n                setTimeout(() => {\r\n                    setRun(runuseEffect + 1)\r\n                    setErrorMessage(null)\r\n                }, 5000)\r\n            })\r\n    }\r\n\r\n    const notesToShow = showAll ? notes : notes.filter(note => note.important === true)\r\n\r\n    const handleNoteChange = (e) => {\r\n        //console.log(e.target.value)\r\n        setNewNote(e.target.value)\r\n    }\r\n\r\n    const toggleImportanceOf = id => {\r\n        \r\n        const note = notes.find(n => n.id === id)\r\n        const changedNote = { ...note, important: !note.important }\r\n\r\n        noteServices.update(id,changedNote).then(updatedNote =>\r\n            setNotes(notes.map(note => note.id !== id ? note : updatedNote)))\r\n                .catch(error => {\r\n                    setErrorMessage(\r\n                        `Note '${note.content}' was already removed from server`\r\n                    )\r\n                    setTimeout(() => {\r\n                        setErrorMessage(null)\r\n                    }, 5000)\r\n\r\n                }\r\n  )\r\n}\r\n\r\n    const removeNote = id => {\r\n        const DeletedNote = notes.find(n => n.id === id)\r\n        noteServices.remove(id)\r\n        .then(setNotes(notes.filter(note => note !== DeletedNote)))\r\n            .catch(error => {\r\n                setErrorMessage(\r\n                    `Note '${DeletedNote.content}' was already removed from server`\r\n                )\r\n                setTimeout(() => {\r\n                    setErrorMessage(null)\r\n                }, 5000)\r\n\r\n            })\r\n    }\r\n\r\n    const Notification = ({ message }) => {\r\n        if (message === null) {\r\n            return null\r\n        }\r\n\r\n        return (\r\n            <div className=\"error\">\r\n                {message}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Notes</h1>\r\n            <Notification message={errorMessage} />\r\n            <button onClick={()=>setShowAll(!showAll)}>\r\n                Show {showAll ? 'important': 'all'}\r\n            </button>\r\n            <ul>\r\n                {notesToShow.map((note, i) =>\r\n                    <Note key={i} note={note} toggleImportance = {()=>toggleImportanceOf(note.id)} deleteNote = {()=>removeNote(note.id)} />\r\n                )}\r\n            </ul>\r\n            <form onSubmit={addNote}>\r\n                    <input type = \"text\" value = {newNote} onChange = {handleNoteChange} required></input>\r\n                    <button type=\"submit\">Add Note</button>\r\n            </form>\r\n            <Footer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App ","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}